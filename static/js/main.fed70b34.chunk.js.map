{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","setName","company","setCompany","followers","setFollowers","userInput","setUserInput","useEffect","fetch","then","res","join","data","setData","class","className","Form","onSubmit","json","console","log","Group","Input","placeholder","value","onChange","e","target","Button","content","Card","Content","Header","extra","Icon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAqIeA,MA9Hf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAGcF,mBAAS,IAHvB,mBAGNG,EAHM,KAGEC,EAHF,OAIkBJ,mBAAS,IAJ3B,mBAINK,EAJM,KAIIC,EAJJ,OAQkBN,mBAAS,IAR3B,mBAQNO,EARM,KAQIC,EARJ,OASUR,mBAAS,MATnB,6BAWbS,qBAAU,WACRC,MAAM,qFACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACHC,EAAQD,QAEX,IAEF,IAAMC,EAAQ,SAAC,GAUV,IATHd,EASE,EATFA,KAEAE,EAOE,EAPFA,QACAE,EAME,EANFA,UAOEH,EAAQD,GAERG,EAAWD,GACXG,EAAaD,IAsBjB,OACE,gCACM,qBAAKW,MAAM,MAAX,SACK,sFAIJ,qBAAKC,UAAU,SAAf,SACC,cAACC,EAAA,EAAD,CAAMC,SAnBG,WACdT,MAAM,mFAAD,OAAoFH,EAApF,mBACJI,MAAK,SAAAC,GAAG,OAAEA,EAAIQ,UACdT,MAAK,SAAAG,GACJC,EAAQD,GACRO,QAAQC,IAAIP,EAAQD,MACrBO,QAAQC,IAAIR,OAaR,SACI,eAACI,EAAA,EAAKK,MAAN,WACM,cAACL,EAAA,EAAKM,MAAN,CAAaC,YAAY,+BAA+BC,MAAOnB,EAAWoB,SAzB1E,SAAAC,GAChBpB,EAAaoB,EAAEC,OAAOH,UAyBN,cAACR,EAAA,EAAKY,OAAN,CAAcC,QAAQ,kBAMlC,qBAAKd,UAAU,OAAf,SACO,eAACe,EAAA,EAAD,WAcF,cAACA,EAAA,EAAKC,QAAN,UACO,cAACD,EAAA,EAAKE,OAAN,UAAcjC,MAIrB,cAAC+B,EAAA,EAAKC,QAAN,CAAcE,OAAK,EAAnB,SACA,8BACK,cAACC,EAAA,EAAD,CAAMnC,KAAK,SACRE,OAIP,cAAC6B,EAAA,EAAKC,QAAN,CAAcE,OAAK,EAAnB,SACC,8BACE,cAACC,EAAA,EAAD,CAAMnC,KAAK,SACNI,EAFP,2BC/FFgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fed70b34.chunk.js","sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport { Form,Card,Icon} from 'semantic-ui-react';\nimport './App.css';\n\n\n\n\nfunction App() {\n  const [name, setName] = useState('');\n  // const [userName, setUsername] = useState('');\n  const [company,setCompany]=useState('');\n  const [followers,setFollowers]=useState('');\n  // const [following, setFollowing] = useState('');\n  // const [repos, setRepos] = useState('');\n  // const [avatar, setAvatar] = useState('');\n  const [userInput,setUserInput]=useState('');\n  const [error,setError]=useState(null);\n\n  useEffect(()=>{\n    fetch(\"https://api.github.com/search/users?q=followers:%3E1000+sort:followers&per_page=3\")\n    .then(res=>res.join())\n    .then(data=>{\n       setData(data);\n    });\n  },[]);\n  \n  const setData=({\n    name,\n    // userName,\n    company,\n    followers,\n    // following,\n    // repos,\n    // avatar\n\n\n  })=>{\n      setName(name);\n      // setUsername(userName);\n      setCompany(company);\n      setFollowers(followers);\n      // setFollowing(following);\n      // setRepos(repos);\n      // setAvatar(avatar);\n\n  };\n\n  const handleSearch =e=>{\n      setUserInput(e.target.value);\n  };\n\n  const handleSubmit=()=>{\n       fetch(`https://api.github.com/search/users?q=followers:%3E1000+sort:followers&per_page=${userInput}/html_url/name`)\n       .then(res=>res.json())\n       .then(data=>{\n         setData(data);\n         console.log(setData.data)\n        console.log(data)\n       });\n  }\n\n\n  return (\n    <div >\n          <div class='top'>\n               <h1>Get top developer on github by number of followers</h1>\n          </div>\n\n          \n           <div className='search'>\n            <Form onSubmit={handleSubmit}>\n                <Form.Group>\n                      <Form.Input  placeholder='Get number of top developers' value={userInput} onChange={handleSearch}/>\n                      <Form.Button  content='Search' />\n                 </Form.Group>\n            </Form>\n          </div>\n          \n\n          <div className='card'>\n                 <Card>\n                      {/* <Card.Content> */}\n                           {/* <Card.Header>{name}</Card.Header> */}\n                            {/* <Card.Meta>{company}</Card.Meta> */}\n                     {/* </Card.Content> */}\n                   {/* <Card.Content extra> */}\n                         {/* <a> */}\n                             {/* <Icon name='user' /> */}\n                              {/* {followers} Followers */}\n                         {/* </a> */}\n                    {/* </Card.Content> */}\n                {/* </Card>  */}\n                {/* <Card> */}\n                  {/* <Image src={avatar} wrapped ui={false} /> */}\n               <Card.Content>\n                      <Card.Header>{name}</Card.Header>\n                      {/* <Card.Header>{userName}</Card.Header> */}\n               </Card.Content>\n\n               <Card.Content extra>\n               <a>\n                    <Icon name='user' /> \n                      {company} \n                 </a>\n               </Card.Content>\n\n                <Card.Content extra> \n                 <a>  \n                   <Icon name='user' /> \n                       {followers} Followers \n                 </a> \n                 </Card.Content>  \n\n               \n                {/* <Card.Content extra>\n               <a>\n                   <Icon name='user' />\n                      {repos} Repos\n                 </a>\n               </Card.Content>  */}\n\n               {/* <Card.Content extra>\n               <a>\n                   <Icon name='user' />\n                      {following} Following\n                 </a>\n               </Card.Content>  */}\n           </Card>\n          </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}